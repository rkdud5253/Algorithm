'''
10
5 3
0 0 1 1 1
1 1 1 1 0
0 0 1 0 0
0 1 1 1 1
1 1 1 0 1
5 3
1 0 0 1 0
1 1 0 1 1
1 0 1 1 1
0 1 1 0 1
0 1 1 1 0
8 3
1 1 0 1 0 1 1 1
0 1 0 1 0 0 0 1
1 1 1 0 0 1 0 1
0 1 0 1 0 1 1 1
0 0 0 1 0 1 0 1
1 1 1 1 1 1 0 0
0 1 0 0 0 1 0 1
1 1 1 0 1 1 1 1
8 4
0 1 1 1 0 1 1 1
1 0 0 1 0 1 0 0
1 0 0 1 1 1 0 1
1 1 1 0 0 1 1 1
0 0 1 0 0 1 0 1
1 1 1 1 1 0 0 0
0 1 0 0 1 0 0 0
1 1 1 0 1 1 1 0
10 3
0 1 0 0 0 1 0 0 0 1
0 1 0 1 0 1 0 1 1 1
1 1 1 1 1 1 1 1 0 1
0 1 0 0 1 0 0 1 0 0
0 1 1 1 1 0 1 1 1 0
0 0 0 1 0 1 0 0 1 0
0 1 1 1 0 1 1 1 1 1
0 1 0 0 0 1 0 0 0 1
1 1 1 0 0 0 0 1 1 1
0 0 1 1 1 0 0 1 0 0
10 4
0 0 1 0 0 0 1 0 0 1
0 0 1 1 0 0 1 1 1 1
1 1 1 1 1 1 1 1 0 1
0 0 1 0 1 0 0 1 0 0
0 1 1 1 1 1 0 1 1 1
0 0 0 1 0 0 1 0 1 0
0 1 1 1 0 1 1 1 0 1
0 0 1 0 0 0 1 0 0 1
1 1 1 0 0 0 0 1 1 1
0 1 0 1 1 0 1 1 1 0
12 3
0 1 0 1 0 1 0 1 0 1 0 1
1 1 0 1 1 1 0 1 1 1 0 1
0 1 1 1 0 1 1 1 0 1 1 1
0 0 1 0 0 0 1 0 0 0 1 0
0 1 1 1 0 1 1 1 0 1 1 1
1 1 0 1 1 1 0 1 1 1 0 1
0 1 1 1 0 1 1 1 0 1 1 1
0 0 1 0 0 0 1 0 0 0 1 0
0 1 1 1 0 1 1 1 0 1 1 1
1 1 0 1 1 1 0 1 1 1 0 1
0 1 1 1 0 1 1 1 0 1 1 1
0 0 1 0 0 0 1 0 0 0 1 0
12 4
0 1 1 1 0 1 1 1 0 1 1 1
1 1 0 1 1 1 0 1 1 1 0 1
1 1 1 1 1 1 1 1 1 1 1 1
1 0 1 0 1 0 1 0 1 0 1 0
0 1 1 1 0 1 1 1 0 1 1 1
1 1 0 1 1 1 0 1 1 1 0 1
1 1 1 1 1 1 1 1 1 1 1 1
1 0 1 0 1 0 1 0 1 0 1 0
0 1 1 1 0 1 1 1 0 1 1 1
1 1 0 1 1 1 0 1 1 1 0 1
1 1 1 1 1 1 1 1 1 1 1 1
1 0 1 0 1 0 1 0 1 0 1 0
15 3
1 1 1 0 1 1 1 0 1 1 1 0 1 1 1
0 1 1 1 0 1 1 1 0 1 1 1 0 1 1
1 0 1 1 1 0 1 1 1 0 1 1 1 0 1
1 1 0 1 1 1 0 1 1 1 0 1 1 1 0
1 1 1 0 1 1 1 0 1 1 1 0 1 1 1
0 1 1 1 0 1 1 1 0 1 1 1 0 1 1
1 0 1 1 1 0 1 1 1 0 1 1 1 0 1
1 1 0 1 1 1 0 1 1 1 0 1 1 1 0
1 1 1 0 1 1 1 0 1 1 1 0 1 1 1
0 1 1 1 0 1 1 1 0 1 1 1 0 1 1
1 0 1 1 1 0 1 1 1 0 1 1 1 0 1
1 1 0 1 1 1 0 1 1 1 0 1 1 1 0
1 1 1 0 1 1 1 0 1 1 1 0 1 1 1
0 1 1 1 0 1 1 1 0 1 1 1 0 1 1
1 0 1 1 1 0 1 1 1 0 1 1 1 0 1
15 2
1 1 1 0 1 1 1 0 1 1 1 0 1 1 1
0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
1 0 1 1 1 0 1 1 1 0 1 1 1 0 1
0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
1 1 1 0 1 1 1 0 1 1 1 0 1 1 1
0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
1 0 1 1 1 0 1 1 1 0 1 1 1 0 1
0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
1 1 1 0 1 1 1 0 1 1 1 0 1 1 1
0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
1 0 1 1 1 0 1 1 1 0 1 1 1 0 1
0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
1 1 1 0 1 1 1 0 1 1 1 0 1 1 1
0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
1 0 1 1 1 0 1 1 1 0 1 1 1 0 1
'''

T = int(input())
for tc in range(1, T+1):
    # N: 배열길이(세로,가로), K: 단어길이
    N, K = map(int, input().split())
    puzzle = [list(map(int, input().split())) for _ in range(N)]
    # for row in puzzle:
    #     print(row)

    result = 0      # 단어가 들어갈 자리 개수

    # 가로방향에서 찾기
    for i in range(N):
        cnt = 0     # 단어 개수 셀 카운트
        for j in range(N):
            if puzzle[i][j] == 1:   # 1일때는 단어길이를 세주어야하니까 cnt늘려줌
                cnt += 1
            if puzzle[i][j] == 0 or j == N-1:   # 세다가 0이나 끝자리를 만나면
                if cnt == K:        # 그때 단어길이와 카운트숫자가 같다면
                    result += 1     # 단어가 들어갈 수 있으니까 한 자리 찾음
                    cnt = 0         # 다시 카운트 세줘야하니까 0으로 초기화
                cnt = 0             # 길이가 맞지않다면 다시 세줘야하므로 0으로 초기화

    # print(result)

    # 세로방향에서 찾기
    for j in range(N):
        cnt = 0
        for i in range(N):
            if puzzle[i][j] == 1:
                cnt += 1
            if puzzle[i][j] == 0 or i == N-1:
                if cnt == K:
                    result += 1
                    cnt = 0
                cnt = 0

    print("#{} {}".format(tc, result))